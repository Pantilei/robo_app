{"version":3,"sources":["components/Card.js","components/CardsList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Counter.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardsList","robotsList","robots","map","item","key","SearchBox","onSearchChange","inputValue","aria-label","type","placeholder","onChange","value","Scroll","props","style","overflowY","height","border","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","Counter","prevProps","preState","count","console","log","onClick","countFunc","Header","changeCounter","counter","prevState","App","fetchRobots","filteredRobots","filter","robot","toLowerCase","includes","search","length","color","onSearch","connect","searchField","dispatch","event","payload","target","a","async","fetch","response","json","data","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","initialValuesSearch","initialValuesRobots","isPending","reducers","createLogger","combineReducers","action","store","createStore","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kRAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,wDACb,yBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,UACzD,6BACE,4BAAKL,GACL,2BAAIC,MCOGK,EAZG,SAAC,GAAgB,IAC3BC,EAD0B,EAAbC,OACOC,KAAI,SAAAC,GAC5B,OACE,kBAAC,EAAD,CAAMC,IAAKD,EAAKR,GAAIF,KAAMU,EAAKV,KAAMC,MAAOS,EAAKT,MAAOC,GAAIQ,EAAKR,QAMrE,OAAO,6BAAMK,ICKAK,EAfG,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,WACnC,OACE,yBAAKX,UAAU,OACb,2BACEY,aAAW,gBACXZ,UAAU,mCACVa,KAAK,SACLC,YAAY,mBACZC,SAAUL,EACVM,MAAOL,MCDAM,EARA,SAAAC,GACb,OACE,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,QAASC,OAAQ,cACzDJ,EAAMK,WCiBEC,E,YAnBb,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KACDO,MAAQ,CACXC,UAAU,GAHK,E,+EAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACN,yDAEFG,KAAKX,MAAMK,a,GAhBKQ,IAAMC,WCiBlBC,E,8LAhBSC,EAAWC,GAC/B,OAAIN,KAAKX,MAAMkB,QAAUF,EAAUE,Q,+BAK3B,IAAD,OAEP,OADAC,QAAQC,IAAI,WAEV,4BAAQC,QAAS,kBAAM,EAAKrB,MAAMsB,cAAlC,aACaX,KAAKX,MAAMkB,W,GAXRL,IAAMC,WC+BbS,E,YA7Bb,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KAWRwB,cAAgB,WACd,EAAKZ,UAAS,SAAAL,GACZ,MAAO,CAAEkB,QAASlB,EAAMkB,QAAU,OAZpC,EAAKlB,MAAQ,CAAEkB,QAAS,GAFP,E,mFAIGT,EAAWU,GAE/B,OADAP,QAAQC,IAAIJ,EAAWU,GACnBf,KAAKJ,MAAMkB,UAAYC,EAAUD,U,+BAcrC,OADAN,QAAQC,IAAI,UAEV,oCACE,wBAAItC,UAAU,MAAd,uBACA,kBAAC,EAAD,CAASoC,MAAOP,KAAKJ,MAAMkB,QAASH,UAAWX,KAAKa,qB,GAxBvCX,IAAMC,W,yBCWrBa,G,kMAEFhB,KAAKX,MAAM4B,gB,+BAIH,IAAD,OAEDC,EAAiBlB,KAAKX,MAAMb,OAAO2C,QAAO,SAAAC,GAC9C,OAAOA,EAAMpD,KAAKqD,cAAcC,SAAS,EAAKjC,MAAMkC,OAAOF,kBAG7D,OAAiC,IAA7BrB,KAAKX,MAAMb,OAAOgD,OACb,0CAGP,yBAAKrD,UAAU,MACb,kBAAC,EAAD,CAAQsD,MAAO,QACf,kBAAC,EAAD,CACE5C,eAAgBmB,KAAKX,MAAMqC,SAC3B5C,WAAYkB,KAAKX,MAAMkC,SAEzB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAW/C,OAAQ0C,W,GAxBbhB,IAAMC,YA0CTwB,eAVS,SAAA/B,GACtB,MAAO,CAAE2B,OAAQ3B,EAAMgC,YAAYL,OAAQ/C,OAAQoB,EAAMqB,YAAYzC,WAG5C,SAAAqD,GACzB,MAAO,CACLH,SAAU,SAAAI,GAAK,OAAID,EC5Cd,CAAE7C,KCRW,SDQG+C,QD4CgBD,EAAME,OAAO7C,SAClD8B,YAAa,kBAAMY,GC1CoB,SAAMA,GAAN,iBAAAI,EAAAC,OAAA,uDACzCL,EAAS,CAAE7C,KCXuB,yBDUO,oBAAAiD,EAAA,MAGhBE,MAAM,+CAHU,cAGjCC,EAHiC,kBAAAH,EAAA,MAIpBG,EAASC,QAJW,OAIjCC,EAJiC,OAKvCT,EAAS,CAAE7C,KCdqB,uBDcO+C,QAASO,IALT,kDAOvCT,EAAS,CAAE7C,KCfmB,qBDeO+C,QAAQ,EAAD,KAPL,gED6C5BJ,CAA6CX,G,gBG5CtDuB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1D,QACfoD,UAAUC,cAAcQ,YAI1BjD,QAAQC,IACN,iHAKEsC,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlB5C,QAAQC,IAAI,sCAGRsC,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAA9D,GACLU,QAAQV,MAAM,4CAA6CA,M,kBCzF3D+D,EAAsB,CAAEtC,OAAQ,IAWhCuC,EAAsB,CAAEtF,OAAQ,GAAIsB,MAAO,GAAIiE,WAAW,GCF1DC,GAFSC,yBAEEC,YAAgB,CAC/BtC,YDRgC,WAA0C,IAAzChC,EAAwC,uDAAhCiE,EAAqBM,EAAW,uCACzE,OAAQA,EAAOnF,MACb,IFXkB,SEYhB,OAAO,eAAKY,EAAZ,CAAmB2B,OAAQ4C,EAAOpC,UACpC,QACE,OAAOnC,ICIXqB,YDEgC,WAA0C,IAAzCrB,EAAwC,uDAAhCkE,EAAqBK,EAAW,uCACzE,OAAQA,EAAOnF,MACb,IFrBgC,uBEsB9B,OAAO,eAAKY,EAAZ,CAAmBmE,WAAW,IAChC,IFtBgC,uBEuB9B,OAAO,eAAKnE,EAAZ,CAAmBpB,OAAQ2F,EAAOpC,UACpC,IFvB8B,qBEwB5B,OAAO,eAAKnC,EAAZ,CAAmBE,MAAOqE,EAAOpC,UACnC,QACE,OAAOnC,OCTPwE,EAAQC,YAAYL,EAAUM,YAAgBC,MAEpDC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SFJnB,SAAkB5B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI4B,IAAIC,YAAwBpC,OAAOC,SAASoC,MACpDC,SAAWtC,OAAOC,SAASqC,OAIvC,OAGFtC,OAAOuC,iBAAiB,QAAQ,WAC9B,IAAMlC,EAAK,UAAM+B,YAAN,sBAEPtC,IAgEV,SAAiCO,EAAOC,GAEtCZ,MAAMW,EAAO,CACXmC,QAAS,CAAE,iBAAkB,YAE5B9B,MAAK,SAAAf,GAEJ,IAAM8C,EAAc9C,EAAS6C,QAAQE,IAAI,gBAEnB,MAApB/C,EAASgD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CrC,UAAUC,cAAcqC,MAAMnC,MAAK,SAAAC,GACjCA,EAAamC,aAAapC,MAAK,WAC7BV,OAAOC,SAAS8C,eAKpB3C,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLpD,QAAQC,IACN,oEAvFAgF,CAAwB3C,EAAOC,GAI/BC,UAAUC,cAAcqC,MAAMnC,MAAK,WACjC3C,QAAQC,IACN,iHAMJoC,EAAgBC,EAAOC,OElB/BE,K","file":"static/js/main.8c6c5268.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3  pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardsList = ({ robots }) => {\r\n  const robotsList = robots.map(item => {\r\n    return (\r\n      <Card key={item.id} name={item.name} email={item.email} id={item.id} />\r\n    );\r\n  });\r\n  /* if (true) {\r\n    throw new Error(\"Noooooooo............!\");\r\n  } */\r\n  return <div>{robotsList}</div>;\r\n};\r\n\r\nexport default CardsList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ onSearchChange, inputValue }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        aria-label=\"Search Robots\"\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search for robot\"\r\n        onChange={onSearchChange}\r\n        value={inputValue}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div style={{ overflowY: \"scroll\", height: \"600px\", border: \"5px solid\" }}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nclass ErrorBoundry extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Hoops, that was not good!</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from \"react\";\r\n\r\nclass Counter extends React.Component {\r\n  shouldComponentUpdate(prevProps, preState) {\r\n    if (this.props.count !== prevProps.count) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  render() {\r\n    console.log(\"counter\");\r\n    return (\r\n      <button onClick={() => this.props.countFunc()}>\r\n        Click me: {this.props.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\nimport Counter from \"./Counter\";\r\n\r\nclass Header extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { counter: 0 };\r\n  }\r\n  shouldComponentUpdate(prevProps, prevState) {\r\n    console.log(prevProps, prevState);\r\n    if (this.state.counter !== prevState.counter) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  changeCounter = () => {\r\n    this.setState(state => {\r\n      return { counter: state.counter + 1 };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log(\"Header\");\r\n    return (\r\n      <>\r\n        <h1 className=\"f1\">Welcome To Robo App</h1>\r\n        <Counter count={this.state.counter} countFunc={this.changeCounter} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport CardsList from \"../components/CardsList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport Header from \"../components/Header\";\r\n//import { robots } from \"./robots\";\r\n\r\n//Redux\r\nimport { connect } from \"react-redux\";\r\nimport { onSearch, fetchRobotsFromServer } from \"../actions\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    this.props.fetchRobots();\r\n    //console.log(\"componentDidMount\");\r\n  }\r\n\r\n  render() {\r\n    //console.log(this.props);\r\n    const filteredRobots = this.props.robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(this.props.search.toLowerCase());\r\n    });\r\n    //console.log(\"render\");\r\n    if (this.props.robots.length === 0) {\r\n      return <h1>Loading...</h1>;\r\n    }\r\n    return (\r\n      <div className=\"tc\">\r\n        <Header color={\"red\"} />\r\n        <SearchBox\r\n          onSearchChange={this.props.onSearch}\r\n          inputValue={this.props.search}\r\n        />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardsList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { search: state.searchField.search, robots: state.fetchRobots.robots };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearch: event => dispatch(onSearch(event.target.value)),\r\n    fetchRobots: () => dispatch(fetchRobotsFromServer())\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  SEARCH,\r\n  ROBOTS_FETCH_ERROR,\r\n  ROBOTS_FETCH_PENDING,\r\n  ROBOTS_FETCH_SUCCESS\r\n} from \"./constants\";\r\n\r\nexport const onSearch = text => {\r\n  return { type: SEARCH, payload: text };\r\n};\r\n\r\nexport const fetchRobotsFromServer = () => async dispatch => {\r\n  dispatch({ type: ROBOTS_FETCH_PENDING });\r\n  try {\r\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\r\n    const data = await response.json();\r\n    dispatch({ type: ROBOTS_FETCH_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: ROBOTS_FETCH_ERROR, payload: error });\r\n  }\r\n};\r\n\r\n/* export const fetchRobotsFromServer = () => dispatch => {\r\n  dispatch({ type: ROBOTS_FETCH_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      console.log(data);\r\n      dispatch({ type: ROBOTS_FETCH_SUCCESS, payload: data });\r\n    })\r\n    .catch(error => dispatch({ type: ROBOTS_FETCH_ERROR, payload: error }));\r\n}; */\r\n","export const SEARCH = \"SEARCH\";\r\nexport const ROBOTS_FETCH_PENDING = \"ROBOTS_FETCH_PENDING\";\r\nexport const ROBOTS_FETCH_SUCCESS = \"ROBOTS_FETCH_SUCCESS\";\r\nexport const ROBOTS_FETCH_ERROR = \"ROBOTS_FETCH_ERROR\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  SEARCH,\r\n  ROBOTS_FETCH_ERROR,\r\n  ROBOTS_FETCH_SUCCESS,\r\n  ROBOTS_FETCH_PENDING\r\n} from \"./constants\";\r\n\r\nconst initialValuesSearch = { search: \"\" };\r\n\r\nexport const searchFieldReducer = (state = initialValuesSearch, action) => {\r\n  switch (action.type) {\r\n    case SEARCH:\r\n      return { ...state, search: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialValuesRobots = { robots: [], error: \"\", isPending: true };\r\n\r\nexport const fetchRobotsReducer = (state = initialValuesRobots, action) => {\r\n  switch (action.type) {\r\n    case ROBOTS_FETCH_PENDING:\r\n      return { ...state, isPending: true };\r\n    case ROBOTS_FETCH_SUCCESS:\r\n      return { ...state, robots: action.payload };\r\n    case ROBOTS_FETCH_ERROR:\r\n      return { ...state, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reduxThunk from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport \"tachyons\";\nimport { createLogger } from \"redux-logger\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n//Redux\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { searchFieldReducer, fetchRobotsReducer } from \"./reducers\";\n//Middleware for monitoring the actions.\nconst logger = createLogger();\n\nconst reducers = combineReducers({\n  searchField: searchFieldReducer,\n  fetchRobots: fetchRobotsReducer\n});\nconst store = createStore(reducers, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}